apply plugin: 'com.android.application'

// build.gradle in the 'app' module

android {
    compileSdk rootProject.ext.CompileSdk

    defaultConfig {
        applicationId "com.donnnno.arcticons"
        minSdkVersion rootProject.ext.MinSdk
        targetSdkVersion rootProject.ext.TargetSdk
        versionCode 1420
        versionName '12.0.5'
        multiDexEnabled true
    }

    // Load keystore
    def keystorePropertiesFile = rootProject.file("keystore.properties");
    def releaseSigning;
    if (keystorePropertiesFile.exists()){
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        releaseSigning = signingConfigs.create("release", signingConfig -> {
            signingConfig.setKeyAlias(keystoreProperties.getProperty("keyAlias"));
            signingConfig.setKeyPassword(keystoreProperties.getProperty("keyPassword"));
            signingConfig.setStoreFile(rootProject.file(keystoreProperties.getProperty("storeFile")));
            signingConfig.setStorePassword(keystoreProperties.getProperty("storePassword"));
        });
    } else {releaseSigning = signingConfigs.getByName("debug"); // Use getByName for safety
}

    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        configureEach {
            signingConfig = releaseSigning
        }
        release {
            minifyEnabled false
        }
        debug {
            applicationIdSuffix '.debug'
        }


        applicationVariants.all { variant ->

            if (variant.flavorName == "you" || variant.flavorName == "youPlay") {
                variant.preBuildProvider.get().dependsOn(":preparehelper:runyou")
            } else if (variant.flavorName == "black" || variant.flavorName == "blackPlay") {
                variant.preBuildProvider.get().dependsOn(":preparehelper:runblack")
            }else if (variant.flavorName == "normal" || variant.flavorName == "normalPlay") {
                variant.preBuildProvider.get().dependsOn(":preparehelper:runnormal")
            }else if (variant.flavorName == "dayNight") {
            variant.preBuildProvider.get().dependsOn(":preparehelper:rundayNight")
        }
            // Add more conditions for additional flavors
        }
    }

    flavorDimensions += "variant"
    productFlavors {
        normal {
            dimension "variant"
            resValue "string", "app_name", "Arcticons"
        }
        normalPlay {
            dimension "variant"
            resValue "string", "app_name", "Arcticons"
        }
        black {
            dimension "variant"
            //noinspection GradlePath
            applicationIdSuffix '.light'
            resValue "string", "app_name", "Arcticons Black"
        }
        blackPlay {
            dimension "variant"
            applicationIdSuffix '.light'
            resValue "string", "app_name", "Arcticons Black"
        }
        you {
            dimension "variant"
            minSdkVersion "26"
            applicationIdSuffix '.you'
            resValue "string", "app_name", "Arcticons Material You"
        }
        youPlay {
            dimension "variant"
            minSdkVersion "26"
            applicationIdSuffix '.you.play'
            resValue "string", "app_name", "Arcticons Material You"
        }
        dayNight {
            dimension "variant"
            minSdkVersion "29"
            applicationIdSuffix '.daynight'
            resValue "string", "app_name", "Arcticons Day & Night"
        }
    }

    sourceSets {
        normal { res.srcDirs = ['src/normalFree/res/', 'src/normal/res'] }
        normalPlay { res.srcDirs = ['src/normalPlay/res/', 'src/normal/res'] }
        black { res.srcDirs = ['src/blackFree/res/', 'src/black/res'] }
        blackPlay { res.srcDirs = ['src/blackPlay/res/', 'src/black/res'] }
		you { res.srcDirs = ['src/youFree/res/', 'src/you/res'] }
        youPlay { res.srcDirs = ['src/youPlay/res/', 'src/you/res'] }
        dayNight { res.srcDirs = ['src/dayNightFree/res/', 'src/dayNight/res'] }
    }

    base {
        // Output file name
        archivesName = "${parent.name}-${android.defaultConfig.versionName}"
    }
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    buildFeatures {
        buildConfig = true
        viewBinding true
    }
    namespace 'com.donnnno.arcticons'
    lint {
        abortOnError false
        checkReleaseBuilds false
        lintConfig = file("lint.xml")
    }

    dependenciesInfo {
        // Disables dependency metadata when building APKs.
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle = false
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    normalPlayImplementation 'com.github.zixpo:candybar:3.21.1'
    blackPlayImplementation 'com.github.zixpo:candybar:3.21.1'
    youPlayImplementation 'com.github.zixpo:candybar:3.21.1'
    normalImplementation 'com.github.donnnno:candybar-foss:3.21.2'
    blackImplementation 'com.github.donnnno:candybar-foss:3.21.2'
    youImplementation 'com.github.donnnno:candybar-foss:3.21.2'
    dayNightImplementation 'com.github.donnnno:candybar-foss:3.21.2'
}

import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

// F-Droid Reproducible Build tasks

project.afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
            task.doLast {
                outputs.files.each { file ->
                    if (file.name.endsWith(".profm")) {
                        println("Sorting ${file} ...")
                        def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                        def profile = ArtProfileKt.ArtProfile(file)
                        def keys = new ArrayList(profile.profileData.keySet())
                        def sortedData = new LinkedHashMap()
                        Collections.sort keys, new DexFile.Companion()
                        keys.each { key -> sortedData[key] = profile.profileData[key] }
                        new FileOutputStream(file).with {
                            write(version.magicBytes$profgen)
                            write(version.versionBytes$profgen)
                            version.write$profgen(it, sortedData, "")
                        }
                    }
                }
            }
        }
    }
}